upstream reestry_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  # for UNIX domain socket setups:
  server unix:/tmp/reestry.sock fail_timeout=0;

  # for TCP setups, point these to your backend servers
  # server 192.168.0.7:8080 fail_timeout=0;
  # server 192.168.0.8:8080 fail_timeout=0;
  # server 192.168.0.9:8080 fail_timeout=0;
}

server {
    listen       80;
    server_name  reestry.ru;
    root /mnt/reestry/public;

    location /stylesheets/ {
        gzip_comp_level 5;
        gzip_disable msie6;
        access_log off;
        expires max;
        add_header Cache-Control public;
    }

    location /javascripts/ {
        gzip_comp_level 8;
        gzip_disable msie6;
        access_log off;
        expires max;
        add_header Cache-Control public;
    }

    location /favicon.ico {
        gzip_comp_level 8;
        access_log off;
        expires max;
        add_header Cache-Control public;
    }

    location /images/ {
        access_log off;
        expires max;
        add_header Cache-Control public;
    }

    location / {
      # an HTTP header important enough to have its own Wikipedia entry:
      #   http://en.wikipedia.org/wiki/X-Forwarded-For
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # enable this if and only if you use HTTPS, this helps Rack
      # set the proper protocol for doing redirects:
      # proxy_set_header X-Forwarded-Proto https;

      # pass the Host: header from the client right along so redirects
      # can be set properly within the Rack application
      proxy_set_header Host $http_host;

      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;

      # set "proxy_buffering off" *only* for Rainbows! when doing
      # Comet/long-poll stuff.  It's also safe to set if you're
      # using only serving fast clients with Unicorn + nginx.
      # Otherwise you _want_ nginx to buffer responses to slow
      # clients, really.
      # proxy_buffering off;

      # Try to serve static files from nginx, no point in making an
      # *application* server like Unicorn/Rainbows! serve static files.
      if (!-f $request_filename) {
        proxy_pass http://reestry_server;
        break;
      }
    }
}